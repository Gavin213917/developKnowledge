	
	封装：
		
	封装是指：将对象的状态信息隐藏在对象内部，不允许外部程序直接访问对象内部信息，而是通过该类所提供的方法来实现对内部信息的操作和访问。
	封装是面向对象贬称语言对客观世界的模拟，在客观世界里，对象的状态信息都被隐藏在对象内部，外界无法直接直接操作和修改，就比如类中的Person
	对象的age变量，只能随着岁月的流逝，age才会增加，通常不能岁月修改属性的值，良好的封装有以下特点：
	
	1：隐藏类的实现细节
	2：让使用者只能通过实现预定的方法来访问数据，从而可以在该方法里加入控制逻辑，限制对成员变量的不合理访问
	3:可进行数据检查，从而利用保证对象信息的完整性。
	4：便于修改，提供代码的可复用性和维护性
	
	
	最重要的两条就是：
	a:把对象的成员变量和实现细节隐藏起来，不允许外部直接访问
	b:把方法暴露出来，让方法控制对这些成员变量进行安全的访问和操作。
	这样做的目的就是为了统一行径，可以在方法中加入控制逻辑。
	
	
	
	
	继承：
	继承是面向对象的三大特征之一，也是实现软件复用的重要手段，Java具有单继承的特点每个子类只有一个直接父类。
	Java中的基础是通过extends关键字来实现的，实现继承的类称为子类，被继承的类被称为父类（超类，基类，大类）
	例如苹果继承了水果，苹果是子类，水果是父类。
	
	继承是把很多子类中相同的成员属性和方法定义父类的过程。
	
	super
	一定要有继承关系（父子关系）前提下，才会有super的概念
	当前类如果没有继承关系，指向的一定是Object
	如果有继承关系，一定指向父类的引用和父类构造函数
	
	 * super在每一个类创建对象的时候吗，都会有代码，只不过是隐士调用，
	 * 1：如果没有一个类没有继承，super指向的是 Object
	 * 2:如果有继承，super()指向的是你父类的构造函数。super是父类的一个引用对象
	 
	
	---他们都成员属性赋值操作
	
	给成员属性赋值一下：
	1：修饰符
	2:你属性是static,不是对象的范畴，用类去调用
	3:final 值赋值一次
	
	
	注意：A a = new A();  其中 A a  编译时类型，new A(); 运行时类型
	
	
	
	
	
	
	
	
	多态：（存在继承的前提下）
	Java引用变量有有两个类型，一个是编译时的类型，一个是运行时的类型，编译时的类型由申明该变量时使用类型决定
	运行时的类型有实际赋给该变量的对象决定，
	如果编译时的类型和运行时的类型不一致的时候，就出现了所谓的多态。
	
	
	
	
	
	访问修饰符总结： public > protected > default >private
	1:public private忽略它
	2:同包中：缺省的，protected只要在同一片文件夹下面（平级的类），可以被访问的
	3:不同包中：protected 一定是父子关系的情况下才能被访问成员属性和方法
	
	访问修饰符：
private
缺省
protected
public

作用范围：
		访问修饰符\作用范围	  	所在类		同一包内其他类		其他包内子类			其他包内非子类
			private				可以访问			不可以				不可以				不可以
			缺省	（default）		可以				可以					不可以				不可以
			protected			可以				可以					可以					不可以
			public				可以				可以					可以					可以


private 
	被private修饰的属性和方法，不能被其他类访问，子类不能继承也不能访问。只能在所在类内部访问。
	
缺省 （default）
	变量或者方法前没有访问修饰符时，可以被所在类访问，可以被同一包内的其他类访问 或者继承。但是不能被其他包访问。
	
protected 
	protected修饰的方法和属性，在同一包内可被访问和继承。不同包内，子类可继承，非子类不能访问。
	
public 
	方法和属性前有public修饰，可以被任意包内的类访问。 
	另外，类要想被其他包导入，必须声明为public。被public修饰的类，类名必须与文件名相同。

	
	
	
	
	/*会话处理*/
	function setSession(key,value,mark){
		var stroage = mark?sessionStorage:localStorage;
		if(stroage)stroage.setItem(key, value);
	};
	
	
	function getSession(key,mark){
		var stroage = mark?sessionStorage:localStorage;
		if(stroage){
			return stroage.getItem(key);
		}else{
			return "";
		}
	};
	
	function removeSession(key,mark){
		var stroage = mark?sessionStorage:localStorage;
		if(stroage){
			return stroage.removeItem(key);
		}else{
			return "";
		}
	};	
		