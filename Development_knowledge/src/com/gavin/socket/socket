Java 网络编程里面有两大块：
	网络资源访问和获取（URL、URLConnection）（URLEncoder/URLDecoder）
	网络通信（Socket）（tcp/ip）
	网络地址InetAddress解析和获取
	
URL 它是URI 的一个子集，代表：统一资源定位器，他是互联网上的资源一个标识符（指针）

URL（uniform resource locator）是由：协议名（http/https/mailto/ftp/smtp），主机名，端口和资源（目录或者文件）组成
什么意思呢：如果要进行文件上传的话是通过HTTP/https协议去进行的，如果你进行目录上传是通过ftp/smtp进行的，研究一下apache组件提供的工具包，它封装了ftp上传目录。


URI 代表：统一资源定位符，Java中的URI不能用于定位任何资源，他的唯一作用就是解析，URL则包含一个可以打开和资源的输入流
(URLConnection) 类，可以理解为URL是URI的一个子集（特例）

	URL提供了很多构造器用来创建URL对象，如果获取URL对象以后，他就可以访问一个URL对应的资源，如果你要下载，则都必须通过一个
	叫URLConnection的类，进行网络资源的获取，ｇｅｔＩｎｐｕｔＳｔｒｅａｍ（）的一个输入流，可以获取网络资源信息，
	那么就可以实现下载
	
	
	

















百度：搜索：Java ftp文件上传

http://(协议)        nodejs.cn(域名)(ip和端口号，默认是80)       /doc/node/(路径)        ?=123456&p2=123(参数)（往服务器发送数据）

1、InetAddress：代表的是IP
	Java中提供InetAddress来代表IP地址，他有两个字类：Inet4Address 和 Inet6Address 他么分别代表不同的IP端，
	它提供的一个方法可以解析和获取URL的信息：
	getByteName(String host);  获取主机对应的InetAddress 对象
	
	
	
	
	
	
	
	1、tcp/IP 通讯协议是一种可靠的网络协议，它在通信的两端各建立一个socket，从而在通信的两端之间形成网络虚拟链路，
	一旦建立了虚拟的网络链接。两端的程序就可以通过虚拟链路进行通信，Java是基于TCP协议的网络通信提供了良好的封装，
	Java使用socket对象来代表两端的通信端口，并通过socket产生IO流来进行网络通信。
	
	
	2、IP地址是用于唯一标识网络中的一个通信实体，这个通信实体即可以是一台电脑，也可以是一个打印机或者路由器的某一个端口，而在基于IP协议网络中传输的数据包，
	都必须使用IP地址来进行标识。
	但是一个通信实体可以有多个通信程序同时提供网络服务，此时还需要端口，端口是一个16位的正数，用于标识数据交给哪个通讯程序处理，因为端口就是应用程序与外界交流的入口。
	他是一种抽象的软件结构，包括一些数据结构和IO缓冲区。不同的应用程序处理不同的端口数据，同一台机器上不能有两个程序使用同一个端口。
	端口号从0-65535 范围内随便选择
	a、公认端口；0-1023 ，它们紧密绑定，一些特定的服务
	b、注册端口：1024-49151 这些端口是应用程序使用的端口，开发中我们一般在这个范围内选择
	c、动态和私有端口 49152-65535 这些端口是应用程序使用的动态窗口，应用程序一般不会使用这些端口。
	如果把IP地址理解为某个人所在地方的地址（街道和门牌号），但仅仅有地址还是找不到这个人的具体的位置，还需知道这个人所在的房号才能找到这个人。
	
	
	TCP 协议被称作一个端对端的协议，这个因为它对两台计算机直接的连接起着重要的作用，当一台计算机和另外一台计算机进行连接时，tcp 协议会让他们建立一个
	链接用于发送和接收数据的虚拟链路，TCP 协议负责收集这些信息包，并将其按适当的次序放好传送，接收端收到数据后再将其正确的还原。
	
	TCP协议保证了数据包在传送过程中准确无误，TCP协议使用重发机制，当一个通信实体发送一个消息给另一个通信实体后，需要收到另一个通信实体的确认信息，如果没有
	收到另一个通信实体的确认信息，则会再次发送刚才发送的信息。通过这种重发机制，tcp协议向应用程序提供了可靠的通信连接，使他能够自动适应网上的各种变化，即使在Internet
	暂时出现堵塞的情况下，也能够保证正常的通信
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	